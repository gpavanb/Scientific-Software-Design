include_path=./include-files
library_path=./library
executable= burgers_static_caf

# TAU compiler command 
#compile=tauf90 -tau:serial,pdt  -O3 -fcoarray=lib -DTAU=1
compile=tau_f90.sh -O3 -fcoarray=lib -DTAU=1

OPTS=-L/opt/opencoarrays/lib
objects = field.o periodic_2nd_order.o kind_parameters.o co_object_interface.o object_interface.o math_constants.o ForTrilinos_assertion_utility.o ForTrilinos_error.o

$(executable): main.o $(objects) Makefile
	$(compile) $(OPTS)  main.o $(objects) -o $(executable) -lcaf_mpi

main.o: main.F90 $(objects) Makefile
	$(compile)  -c main.F90

periodic_2nd_order.o: periodic_2nd_order.F90 field.o kind_parameters.o co_object_interface.o ForTrilinos_assertion_utility.o ForTrilinos_error.o preprocessor_definitions Makefile
	$(compile)  -c periodic_2nd_order.F90

field.o: field.F90 kind_parameters.o math_constants.o object_interface.o ForTrilinos_assertion_utility.o ForTrilinos_error.o Makefile
	$(compile)  -c field.F90

kind_parameters.o: kind_parameters.F90 Makefile
	$(compile)  -c kind_parameters.F90

math_constants.o: math_constants.F90 kind_parameters.o Makefile
	cp $(include_path)/intel_capabilities.txt compiler_capabilities.txt
	cp $(include_path)/intel_capabilities.txt $(library_path)/compiler_capabilities.txt
	$(compile)  -c math_constants.F90

object_interface.o: $(library_path)/object_interface.F90 preprocessor_definitions Makefile
	$(compile)  -c $(library_path)/object_interface.F90

co_object_interface.o: $(library_path)/co_object_interface.F90 Makefile
	$(compile)  -c $(library_path)/co_object_interface.F90

ForTrilinos_assertion_utility.o: $(library_path)/ForTrilinos_assertion_utility.F90 preprocessor_definitions Makefile 
	$(compile)  -c $(library_path)/ForTrilinos_assertion_utility.F90

ForTrilinos_error.o: $(library_path)/ForTrilinos_error.F90 Makefile
	$(compile)  -c $(library_path)/ForTrilinos_error.F90

.PHONY : clean
clean :
	-rm -f  *.o *.mod $(executable) core fort.* $(library_path)/compiler_capabilities.txt profile* MULT* *.trc *.edf

preprocessor_definitions: 
ifeq ($(compile),$(gnu))
	cp $(include_path)/gfortran_capabilities.txt compiler_capabilities.txt
	cp $(include_path)/gfortran_capabilities.txt $(library_path)/compiler_capabilities.txt
else
  ifeq ($(compile),$(intel))
	cp $(include_path)/intel_capabilities.txt compiler_capabilities.txt
	cp $(include_path)/intel_capabilities.txt $(library_path)/compiler_capabilities.txt
  else
      ifeq ($(compile),$(cray))
	cp $(include_path)/cray_capabilities.txt compiler_capabilities.txt
	cp $(include_path)/cray_capabilities.txt $(library_path)/compiler_capabilities.txt
      endif
  endif
endif

ifeq ($(compile),$(tau_gnu))
	cp $(include_path)/gfortran_capabilities.txt compiler_capabilities.txt
	cp $(include_path)/gfortran_capabilities.txt $(library_path)/compiler_capabilities.txt
else
  ifeq ($(compile),$(tau_intel))
	cp $(include_path)/intel_capabilities.txt compiler_capabilities.txt
	cp $(include_path)/intel_capabilities.txt $(library_path)/compiler_capabilities.txt
  else
      ifeq ($(compile),$(tau_cray))
	cp $(include_path)/cray_capabilities.txt compiler_capabilities.txt
	cp $(include_path)/cray_capabilities.txt $(library_path)/compiler_capabilities.txt
      endif
  endif
endif
